
	double complex * a = malloc(sizeof(double complex) * 36);
	a[0] = 111; a[6] = 0;   a[12] = 4;    a[18] = 33;   a[24] = 30;   a[30] = 0.1;
	a[1] = 2;   a[7] = -2;  a[13] = 0.45; a[19] = 39;   a[25] = 30;   a[31] = -20;
	a[2] = 4;   a[8] = 10;  a[14] = 1221;   a[20] = 32;   a[26] = -199; a[32] = -100;
	a[3] = 55;  a[9] = 1;   a[15] = 0.1;  a[21] = -13;  a[27] = 1;    a[33] = 0.1;
	a[4] = 2;   a[10] = 33; a[16] = -10;  a[22] = -100; a[28] = 0;    a[34] = 0.01;
	a[5] = 14444;   a[11] = 31; a[17] = 3;    a[23] = -300; a[29] = 3333;    a[35] = 46;
	
 	int n6 = 6;
	double complex * L, * U; double * P;
	L = calloc(n6 * n6, sizeof(double complex));
	U = calloc(n6 * n6, sizeof(double complex));
	P = calloc(n6 * n6, sizeof(double));
	
	LU_Decomp(n6, a, L, U, P);
	
	printf("\n========\n");
	for(int i = 0; i < n6; i++){
		for(int j = 0; j < n6; j++){
			printf("%*.4e  ", 10, L[i + j * n6]);
		}
		printf("\n");
	}
	printf("\n");

	printf("\n========\n");
	for(int i = 0; i < n6; i++){
		for(int j = 0; j < n6; j++){
			printf("%*.4e  ", 10, U[i + j * n6]);
		}
		printf("\n");
	}
	printf("\n");

	printf("\n========\n");
	for(int i = 0; i < n6; i++){
		for(int j = 0; j < n6; j++){
			printf("%g  ", 10, P[i + j * n6]);
		}
		printf("\n");
	}
	printf("\n");
	
	// construct P from piv
	
	